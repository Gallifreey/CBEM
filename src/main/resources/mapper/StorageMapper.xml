<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sd.mapper.StorageMapper">

    <resultMap id="BaseResultMap" type="com.sd.entity.Storage">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="name" column="name" jdbcType="VARCHAR"/>
            <result property="description" column="description" jdbcType="VARCHAR"/>
            <result property="address" column="address" jdbcType="VARCHAR"/>
            <result property="type" column="type" jdbcType="SMALLINT"/>
            <result property="deliverystate" column="deliveryState" jdbcType="SMALLINT"/>
            <result property="remained" column="remained" jdbcType="INTEGER"/>
            <result property="auth" column="auth" jdbcType="INTEGER"/>
            <result property="picture" column="picture" jdbcType="VARCHAR"/>
            <result property="authTime" column="authTime" jdbcType="DATE"/>
    </resultMap>
    <sql id="Base_Column_List">
        id,name,description,
        address,type,deliveryState,
        remained,auth,picture,authTime
    </sql>
    <!-- 插入新仓库 -->
    <insert id="createStorage" parameterType="com.sd.entity.Storage">
        insert into storage (name, description, address, type, deliveryState,remained,picture)
        values (#{name}, #{description}, #{address}, #{type}, #{deliverystate}, #{remained}, #{picture})
    </insert>

    <!-- 删除仓库 -->
    <delete id="deleteStorage" parameterType="int">
        delete
        from storage
        where id = #{id};
    </delete>

    <!-- 更新仓库 -->
    <update id="updateStorage" parameterType="com.sd.entity.Storage">
        update storage
        set name = #{name},
            description = #{description},
            address = #{address},
            type = #{type},
            deliveryState = #{deliverystate},
            remained = #{remained},
            picture = #{picture}
        where id = #{id};
    </update>

    <!-- 查询所有仓库 -->
    <select id="findStorageById" resultMap="BaseResultMap">
        select name,address,authTime,id
        from storage
        where id
        in (
            select storageID
            from storagemanager
            where uid = #{id}
                  )
        ;
    </select>

    <delete id="deleteStorages" parameterType="list">
        delete
        from `storage`
        where id
        in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <update id="addAuth" parameterType="int">
        update `storage`
        set auth = 1
        where id=#{id};
    </update>

    <update id="cancelAuth" parameterType="int">
        update `storage`
        set auth = 0
        where id=#{id};
    </update>
    <select id="listStorage" parameterType="int" resultMap="BaseResultMap">
        select id, name, authTime,picture
        from `storage`
        where id=#{id}
    </select>
    <select id="queryStorage" resultMap="BaseResultMap">
        select id, name, authTime,picture
        from `storage`
        where name like CONCAT('%', #{name}, '%')
        or authTime between #{belowTime} AND #{topTime}
    </select>
    <select id="searchStorage" resultMap="BaseResultMap">
        select id, name, authTime,address
        from `storage`
        where name like CONCAT('%', #{name}, '%')
           or address like CONCAT('%', #{address}, '%')
           or authTime between #{belowTime} AND #{topTime}
    </select>
</mapper>
